/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.stockgeeks.stock.tick.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro schema for our stock tick. */
@org.apache.avro.specific.AvroGenerated
public class StockTick extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4523912057177329788L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTick\",\"namespace\":\"io.stockgeeks.stock.tick.avro\",\"doc\":\"Avro schema for our stock tick.\",\"fields\":[{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The identifier of the stock.\"},{\"name\":\"exchange\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The stock exchange the stock was traded.\"},{\"name\":\"tradeValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The value the stock was traded for.\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The currency the stock was traded in.\"},{\"name\":\"tradeTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Epoch millis timestamp at which the stock trade took place.\",\"logicalType\":\"timestamp-millis\"}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockTick> ENCODER =
      new BinaryMessageEncoder<StockTick>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTick> DECODER =
      new BinaryMessageDecoder<StockTick>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockTick> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockTick> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockTick> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockTick>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockTick to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockTick from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockTick instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockTick fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The identifier of the stock. */
  @Deprecated public java.lang.String symbol;
  /** The stock exchange the stock was traded. */
  @Deprecated public java.lang.String exchange;
  /** The value the stock was traded for. */
  @Deprecated public java.lang.String tradeValue;
  /** The currency the stock was traded in. */
  @Deprecated public java.lang.String currency;
  /** Epoch millis timestamp at which the stock trade took place. */
  @Deprecated public java.lang.String tradeTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTick() {}

  /**
   * All-args constructor.
   * @param symbol The identifier of the stock.
   * @param exchange The stock exchange the stock was traded.
   * @param tradeValue The value the stock was traded for.
   * @param currency The currency the stock was traded in.
   * @param tradeTime Epoch millis timestamp at which the stock trade took place.
   */
  public StockTick(java.lang.String symbol, java.lang.String exchange, java.lang.String tradeValue, java.lang.String currency, java.lang.String tradeTime) {
    this.symbol = symbol;
    this.exchange = exchange;
    this.tradeValue = tradeValue;
    this.currency = currency;
    this.tradeTime = tradeTime;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return exchange;
    case 2: return tradeValue;
    case 3: return currency;
    case 4: return tradeTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = (java.lang.String)value$; break;
    case 1: exchange = (java.lang.String)value$; break;
    case 2: tradeValue = (java.lang.String)value$; break;
    case 3: currency = (java.lang.String)value$; break;
    case 4: tradeTime = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The identifier of the stock.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * The identifier of the stock.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'exchange' field.
   * @return The stock exchange the stock was traded.
   */
  public java.lang.String getExchange() {
    return exchange;
  }


  /**
   * Sets the value of the 'exchange' field.
   * The stock exchange the stock was traded.
   * @param value the value to set.
   */
  public void setExchange(java.lang.String value) {
    this.exchange = value;
  }

  /**
   * Gets the value of the 'tradeValue' field.
   * @return The value the stock was traded for.
   */
  public java.lang.String getTradeValue() {
    return tradeValue;
  }


  /**
   * Sets the value of the 'tradeValue' field.
   * The value the stock was traded for.
   * @param value the value to set.
   */
  public void setTradeValue(java.lang.String value) {
    this.tradeValue = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The currency the stock was traded in.
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * The currency the stock was traded in.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'tradeTime' field.
   * @return Epoch millis timestamp at which the stock trade took place.
   */
  public java.lang.String getTradeTime() {
    return tradeTime;
  }


  /**
   * Sets the value of the 'tradeTime' field.
   * Epoch millis timestamp at which the stock trade took place.
   * @param value the value to set.
   */
  public void setTradeTime(java.lang.String value) {
    this.tradeTime = value;
  }

  /**
   * Creates a new StockTick RecordBuilder.
   * @return A new StockTick RecordBuilder
   */
  public static io.stockgeeks.stock.tick.avro.StockTick.Builder newBuilder() {
    return new io.stockgeeks.stock.tick.avro.StockTick.Builder();
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTick RecordBuilder
   */
  public static io.stockgeeks.stock.tick.avro.StockTick.Builder newBuilder(io.stockgeeks.stock.tick.avro.StockTick.Builder other) {
    if (other == null) {
      return new io.stockgeeks.stock.tick.avro.StockTick.Builder();
    } else {
      return new io.stockgeeks.stock.tick.avro.StockTick.Builder(other);
    }
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing StockTick instance.
   * @param other The existing instance to copy.
   * @return A new StockTick RecordBuilder
   */
  public static io.stockgeeks.stock.tick.avro.StockTick.Builder newBuilder(io.stockgeeks.stock.tick.avro.StockTick other) {
    if (other == null) {
      return new io.stockgeeks.stock.tick.avro.StockTick.Builder();
    } else {
      return new io.stockgeeks.stock.tick.avro.StockTick.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockTick instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTick>
    implements org.apache.avro.data.RecordBuilder<StockTick> {

    /** The identifier of the stock. */
    private java.lang.String symbol;
    /** The stock exchange the stock was traded. */
    private java.lang.String exchange;
    /** The value the stock was traded for. */
    private java.lang.String tradeValue;
    /** The currency the stock was traded in. */
    private java.lang.String currency;
    /** Epoch millis timestamp at which the stock trade took place. */
    private java.lang.String tradeTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.stockgeeks.stock.tick.avro.StockTick.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.exchange)) {
        this.exchange = data().deepCopy(fields()[1].schema(), other.exchange);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tradeValue)) {
        this.tradeValue = data().deepCopy(fields()[2].schema(), other.tradeValue);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[4].schema(), other.tradeTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing StockTick instance
     * @param other The existing instance to copy.
     */
    private Builder(io.stockgeeks.stock.tick.avro.StockTick other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchange)) {
        this.exchange = data().deepCopy(fields()[1].schema(), other.exchange);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradeValue)) {
        this.tradeValue = data().deepCopy(fields()[2].schema(), other.tradeValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[4].schema(), other.tradeTime);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * The identifier of the stock.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * The identifier of the stock.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder setSymbol(java.lang.String value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * The identifier of the stock.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * The identifier of the stock.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchange' field.
      * The stock exchange the stock was traded.
      * @return The value.
      */
    public java.lang.String getExchange() {
      return exchange;
    }


    /**
      * Sets the value of the 'exchange' field.
      * The stock exchange the stock was traded.
      * @param value The value of 'exchange'.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder setExchange(java.lang.String value) {
      validate(fields()[1], value);
      this.exchange = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'exchange' field has been set.
      * The stock exchange the stock was traded.
      * @return True if the 'exchange' field has been set, false otherwise.
      */
    public boolean hasExchange() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'exchange' field.
      * The stock exchange the stock was traded.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder clearExchange() {
      exchange = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeValue' field.
      * The value the stock was traded for.
      * @return The value.
      */
    public java.lang.String getTradeValue() {
      return tradeValue;
    }


    /**
      * Sets the value of the 'tradeValue' field.
      * The value the stock was traded for.
      * @param value The value of 'tradeValue'.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder setTradeValue(java.lang.String value) {
      validate(fields()[2], value);
      this.tradeValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeValue' field has been set.
      * The value the stock was traded for.
      * @return True if the 'tradeValue' field has been set, false otherwise.
      */
    public boolean hasTradeValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradeValue' field.
      * The value the stock was traded for.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder clearTradeValue() {
      tradeValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * The currency the stock was traded in.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * The currency the stock was traded in.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder setCurrency(java.lang.String value) {
      validate(fields()[3], value);
      this.currency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * The currency the stock was traded in.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currency' field.
      * The currency the stock was traded in.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeTime' field.
      * Epoch millis timestamp at which the stock trade took place.
      * @return The value.
      */
    public java.lang.String getTradeTime() {
      return tradeTime;
    }


    /**
      * Sets the value of the 'tradeTime' field.
      * Epoch millis timestamp at which the stock trade took place.
      * @param value The value of 'tradeTime'.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder setTradeTime(java.lang.String value) {
      validate(fields()[4], value);
      this.tradeTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeTime' field has been set.
      * Epoch millis timestamp at which the stock trade took place.
      * @return True if the 'tradeTime' field has been set, false otherwise.
      */
    public boolean hasTradeTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tradeTime' field.
      * Epoch millis timestamp at which the stock trade took place.
      * @return This builder.
      */
    public io.stockgeeks.stock.tick.avro.StockTick.Builder clearTradeTime() {
      tradeTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTick build() {
      try {
        StockTick record = new StockTick();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.String) defaultValue(fields()[0]);
        record.exchange = fieldSetFlags()[1] ? this.exchange : (java.lang.String) defaultValue(fields()[1]);
        record.tradeValue = fieldSetFlags()[2] ? this.tradeValue : (java.lang.String) defaultValue(fields()[2]);
        record.currency = fieldSetFlags()[3] ? this.currency : (java.lang.String) defaultValue(fields()[3]);
        record.tradeTime = fieldSetFlags()[4] ? this.tradeTime : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTick>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTick>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTick>
    READER$ = (org.apache.avro.io.DatumReader<StockTick>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.symbol);

    out.writeString(this.exchange);

    out.writeString(this.tradeValue);

    out.writeString(this.currency);

    out.writeString(this.tradeTime);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.symbol = in.readString();

      this.exchange = in.readString();

      this.tradeValue = in.readString();

      this.currency = in.readString();

      this.tradeTime = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.symbol = in.readString();
          break;

        case 1:
          this.exchange = in.readString();
          break;

        case 2:
          this.tradeValue = in.readString();
          break;

        case 3:
          this.currency = in.readString();
          break;

        case 4:
          this.tradeTime = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










